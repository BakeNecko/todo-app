// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"
	entity "todo-app/internal/entity"
	usecase "todo-app/internal/usecase"

	gomock "github.com/golang/mock/gomock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MockIAccountUseCase is a mock of IAccountUseCase interface.
type MockIAccountUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockIAccountUseCaseMockRecorder
}

// MockIAccountUseCaseMockRecorder is the mock recorder for MockIAccountUseCase.
type MockIAccountUseCaseMockRecorder struct {
	mock *MockIAccountUseCase
}

// NewMockIAccountUseCase creates a new mock instance.
func NewMockIAccountUseCase(ctrl *gomock.Controller) *MockIAccountUseCase {
	mock := &MockIAccountUseCase{ctrl: ctrl}
	mock.recorder = &MockIAccountUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAccountUseCase) EXPECT() *MockIAccountUseCaseMockRecorder {
	return m.recorder
}

// GetById mocks base method.
func (m *MockIAccountUseCase) GetById(ctx context.Context, id string) (*entity.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(*entity.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockIAccountUseCaseMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockIAccountUseCase)(nil).GetById), ctx, id)
}

// MockIAuthUseCase is a mock of IAuthUseCase interface.
type MockIAuthUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockIAuthUseCaseMockRecorder
}

// MockIAuthUseCaseMockRecorder is the mock recorder for MockIAuthUseCase.
type MockIAuthUseCaseMockRecorder struct {
	mock *MockIAuthUseCase
}

// NewMockIAuthUseCase creates a new mock instance.
func NewMockIAuthUseCase(ctrl *gomock.Controller) *MockIAuthUseCase {
	mock := &MockIAuthUseCase{ctrl: ctrl}
	mock.recorder = &MockIAuthUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAuthUseCase) EXPECT() *MockIAuthUseCaseMockRecorder {
	return m.recorder
}

// SignIn mocks base method.
func (m *MockIAuthUseCase) SignIn(ctx context.Context, dto *entity.SignInDTO) (usecase.Tokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", ctx, dto)
	ret0, _ := ret[0].(usecase.Tokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn.
func (mr *MockIAuthUseCaseMockRecorder) SignIn(ctx, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockIAuthUseCase)(nil).SignIn), ctx, dto)
}

// SignUp mocks base method.
func (m *MockIAuthUseCase) SignUp(ctx context.Context, dto *entity.AccountDTO) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", ctx, dto)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUp indicates an expected call of SignUp.
func (mr *MockIAuthUseCaseMockRecorder) SignUp(ctx, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockIAuthUseCase)(nil).SignUp), ctx, dto)
}

// MockITodoUseCase is a mock of ITodoUseCase interface.
type MockITodoUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockITodoUseCaseMockRecorder
}

// MockITodoUseCaseMockRecorder is the mock recorder for MockITodoUseCase.
type MockITodoUseCaseMockRecorder struct {
	mock *MockITodoUseCase
}

// NewMockITodoUseCase creates a new mock instance.
func NewMockITodoUseCase(ctrl *gomock.Controller) *MockITodoUseCase {
	mock := &MockITodoUseCase{ctrl: ctrl}
	mock.recorder = &MockITodoUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITodoUseCase) EXPECT() *MockITodoUseCaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockITodoUseCase) Create(ctx context.Context, dto *entity.TodoDTO, accountID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, dto, accountID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockITodoUseCaseMockRecorder) Create(ctx, dto, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockITodoUseCase)(nil).Create), ctx, dto, accountID)
}

// Delete mocks base method.
func (m *MockITodoUseCase) Delete(ctx context.Context, _id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, _id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockITodoUseCaseMockRecorder) Delete(ctx, _id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockITodoUseCase)(nil).Delete), ctx, _id)
}

// GetAll mocks base method.
func (m *MockITodoUseCase) GetAll(ctx context.Context, accountID string) ([]*entity.TodoObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, accountID)
	ret0, _ := ret[0].([]*entity.TodoObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockITodoUseCaseMockRecorder) GetAll(ctx, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockITodoUseCase)(nil).GetAll), ctx, accountID)
}

// GetById mocks base method.
func (m *MockITodoUseCase) GetById(ctx context.Context, _id string) (*entity.TodoObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, _id)
	ret0, _ := ret[0].(*entity.TodoObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockITodoUseCaseMockRecorder) GetById(ctx, _id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockITodoUseCase)(nil).GetById), ctx, _id)
}

// Update mocks base method.
func (m *MockITodoUseCase) Update(ctx context.Context, dto *entity.TodoUpdateDTO, _id string) (*entity.TodoObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, dto, _id)
	ret0, _ := ret[0].(*entity.TodoObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockITodoUseCaseMockRecorder) Update(ctx, dto, _id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockITodoUseCase)(nil).Update), ctx, dto, _id)
}

// MockIAuthRepository is a mock of IAuthRepository interface.
type MockIAuthRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIAuthRepositoryMockRecorder
}

// MockIAuthRepositoryMockRecorder is the mock recorder for MockIAuthRepository.
type MockIAuthRepositoryMockRecorder struct {
	mock *MockIAuthRepository
}

// NewMockIAuthRepository creates a new mock instance.
func NewMockIAuthRepository(ctrl *gomock.Controller) *MockIAuthRepository {
	mock := &MockIAuthRepository{ctrl: ctrl}
	mock.recorder = &MockIAuthRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAuthRepository) EXPECT() *MockIAuthRepositoryMockRecorder {
	return m.recorder
}

// GetByCredentials mocks base method.
func (m *MockIAuthRepository) GetByCredentials(ctx context.Context, email, password string) (*entity.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCredentials", ctx, email, password)
	ret0, _ := ret[0].(*entity.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCredentials indicates an expected call of GetByCredentials.
func (mr *MockIAuthRepositoryMockRecorder) GetByCredentials(ctx, email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCredentials", reflect.TypeOf((*MockIAuthRepository)(nil).GetByCredentials), ctx, email, password)
}

// Insert mocks base method.
func (m *MockIAuthRepository) Insert(ctx context.Context, dto *entity.AccountDTO) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, dto)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockIAuthRepositoryMockRecorder) Insert(ctx, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockIAuthRepository)(nil).Insert), ctx, dto)
}

// SetSession mocks base method.
func (m *MockIAuthRepository) SetSession(ctx context.Context, _id primitive.ObjectID, session *entity.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSession", ctx, _id, session)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSession indicates an expected call of SetSession.
func (mr *MockIAuthRepositoryMockRecorder) SetSession(ctx, _id, session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSession", reflect.TypeOf((*MockIAuthRepository)(nil).SetSession), ctx, _id, session)
}

// MockIAccountRepository is a mock of IAccountRepository interface.
type MockIAccountRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIAccountRepositoryMockRecorder
}

// MockIAccountRepositoryMockRecorder is the mock recorder for MockIAccountRepository.
type MockIAccountRepositoryMockRecorder struct {
	mock *MockIAccountRepository
}

// NewMockIAccountRepository creates a new mock instance.
func NewMockIAccountRepository(ctrl *gomock.Controller) *MockIAccountRepository {
	mock := &MockIAccountRepository{ctrl: ctrl}
	mock.recorder = &MockIAccountRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAccountRepository) EXPECT() *MockIAccountRepositoryMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockIAccountRepository) GetByID(ctx context.Context, _id string) (*entity.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, _id)
	ret0, _ := ret[0].(*entity.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIAccountRepositoryMockRecorder) GetByID(ctx, _id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIAccountRepository)(nil).GetByID), ctx, _id)
}

// MockITodoRepository is a mock of ITodoRepository interface.
type MockITodoRepository struct {
	ctrl     *gomock.Controller
	recorder *MockITodoRepositoryMockRecorder
}

// MockITodoRepositoryMockRecorder is the mock recorder for MockITodoRepository.
type MockITodoRepositoryMockRecorder struct {
	mock *MockITodoRepository
}

// NewMockITodoRepository creates a new mock instance.
func NewMockITodoRepository(ctrl *gomock.Controller) *MockITodoRepository {
	mock := &MockITodoRepository{ctrl: ctrl}
	mock.recorder = &MockITodoRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITodoRepository) EXPECT() *MockITodoRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockITodoRepository) Create(ctx context.Context, dto *entity.TodoDTO) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, dto)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockITodoRepositoryMockRecorder) Create(ctx, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockITodoRepository)(nil).Create), ctx, dto)
}

// Delete mocks base method.
func (m *MockITodoRepository) Delete(ctx context.Context, todoId primitive.ObjectID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, todoId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockITodoRepositoryMockRecorder) Delete(ctx, todoId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockITodoRepository)(nil).Delete), ctx, todoId)
}

// GetAll mocks base method.
func (m *MockITodoRepository) GetAll(ctx context.Context, AccountId string) ([]*entity.TodoObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, AccountId)
	ret0, _ := ret[0].([]*entity.TodoObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockITodoRepositoryMockRecorder) GetAll(ctx, AccountId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockITodoRepository)(nil).GetAll), ctx, AccountId)
}

// GetByID mocks base method.
func (m *MockITodoRepository) GetByID(ctx context.Context, todoId string) (*entity.TodoObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, todoId)
	ret0, _ := ret[0].(*entity.TodoObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockITodoRepositoryMockRecorder) GetByID(ctx, todoId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockITodoRepository)(nil).GetByID), ctx, todoId)
}

// Update mocks base method.
func (m *MockITodoRepository) Update(ctx context.Context, dto *entity.TodoUpdateDTO, _id string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, dto, _id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockITodoRepositoryMockRecorder) Update(ctx, dto, _id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockITodoRepository)(nil).Update), ctx, dto, _id)
}

// MockIPasswordHasher is a mock of IPasswordHasher interface.
type MockIPasswordHasher struct {
	ctrl     *gomock.Controller
	recorder *MockIPasswordHasherMockRecorder
}

// MockIPasswordHasherMockRecorder is the mock recorder for MockIPasswordHasher.
type MockIPasswordHasherMockRecorder struct {
	mock *MockIPasswordHasher
}

// NewMockIPasswordHasher creates a new mock instance.
func NewMockIPasswordHasher(ctrl *gomock.Controller) *MockIPasswordHasher {
	mock := &MockIPasswordHasher{ctrl: ctrl}
	mock.recorder = &MockIPasswordHasherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPasswordHasher) EXPECT() *MockIPasswordHasherMockRecorder {
	return m.recorder
}

// Hash mocks base method.
func (m *MockIPasswordHasher) Hash(password string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hash", password)
	ret0, _ := ret[0].(string)
	return ret0
}

// Hash indicates an expected call of Hash.
func (mr *MockIPasswordHasherMockRecorder) Hash(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hash", reflect.TypeOf((*MockIPasswordHasher)(nil).Hash), password)
}

// MockITokenManager is a mock of ITokenManager interface.
type MockITokenManager struct {
	ctrl     *gomock.Controller
	recorder *MockITokenManagerMockRecorder
}

// MockITokenManagerMockRecorder is the mock recorder for MockITokenManager.
type MockITokenManagerMockRecorder struct {
	mock *MockITokenManager
}

// NewMockITokenManager creates a new mock instance.
func NewMockITokenManager(ctrl *gomock.Controller) *MockITokenManager {
	mock := &MockITokenManager{ctrl: ctrl}
	mock.recorder = &MockITokenManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITokenManager) EXPECT() *MockITokenManagerMockRecorder {
	return m.recorder
}

// NewJWT mocks base method.
func (m *MockITokenManager) NewJWT(_id string, ttl time.Duration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewJWT", _id, ttl)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewJWT indicates an expected call of NewJWT.
func (mr *MockITokenManagerMockRecorder) NewJWT(_id, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewJWT", reflect.TypeOf((*MockITokenManager)(nil).NewJWT), _id, ttl)
}

// NewRefreshToken mocks base method.
func (m *MockITokenManager) NewRefreshToken() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewRefreshToken")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewRefreshToken indicates an expected call of NewRefreshToken.
func (mr *MockITokenManagerMockRecorder) NewRefreshToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRefreshToken", reflect.TypeOf((*MockITokenManager)(nil).NewRefreshToken))
}

// Parse mocks base method.
func (m *MockITokenManager) Parse(accessToken string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", accessToken)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MockITokenManagerMockRecorder) Parse(accessToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockITokenManager)(nil).Parse), accessToken)
}
